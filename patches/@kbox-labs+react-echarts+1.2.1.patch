diff --git a/node_modules/@kbox-labs/react-echarts/dist/index.js b/node_modules/@kbox-labs/react-echarts/dist/index.js
index 8f76ec7..0a2dd2f 100644
--- a/node_modules/@kbox-labs/react-echarts/dist/index.js
+++ b/node_modules/@kbox-labs/react-echarts/dist/index.js
@@ -353,105 +353,139 @@ function useECharts({
   (0, import_react.useEffect)(() => {
     if (!echartsInstance) return;
     if (onAxisAreaSelected) {
+      echartsInstance.off(echartsEvents.onAxisAreaSelected);
       echartsInstance.on(echartsEvents.onAxisAreaSelected, onAxisAreaSelected);
     }
     if (onBrush) {
+      echartsInstance.off(echartsEvents.onBrush);
       echartsInstance.on(echartsEvents.onBrush, onBrush);
     }
     if (onBrushEnd) {
+      echartsInstance.off(echartsEvents.onBrushEnd);
       echartsInstance.on(echartsEvents.onBrushEnd, onBrushEnd);
     }
     if (onBrushSelected) {
+      echartsInstance.off(echartsEvents.onBrushSelected);
       echartsInstance.on(echartsEvents.onBrushSelected, onBrushSelected);
     }
     if (onClick) {
+      echartsInstance.off(echartsEvents.onClick, onClick);
       echartsInstance.on(echartsEvents.onClick, onClick);
     }
     if (onContextMenu) {
+      echartsInstance.off(echartsEvents.onContextMenu);
       echartsInstance.on(echartsEvents.onContextMenu, onContextMenu);
     }
     if (onDataRangeSelected) {
+      echartsInstance.off(echartsEvents.onDataRangeSelected);
       echartsInstance.on(echartsEvents.onDataRangeSelected, onDataRangeSelected);
     }
     if (onDataViewChanged) {
+      echartsInstance.off(echartsEvents.onDataViewChanged);
       echartsInstance.on(echartsEvents.onDataViewChanged, onDataViewChanged);
     }
     if (onDataZoom) {
+      echartsInstance.off(echartsEvents.onDataZoom);
       echartsInstance.on(echartsEvents.onDataZoom, onDataZoom);
     }
     if (onDoubleClick) {
+      echartsInstance.off(echartsEvents.onDoubleClick);
       echartsInstance.on(echartsEvents.onDoubleClick, onDoubleClick);
     }
     if (onDownplay) {
+      echartsInstance.off(echartsEvents.onDownplay);
       echartsInstance.on(echartsEvents.onDownplay, onDownplay);
     }
     if (onFinished) {
+      echartsInstance.off(echartsEvents.onFinished);
       echartsInstance.on(echartsEvents.onFinished, onFinished);
     }
     if (onGeoSelectChanged) {
+      echartsInstance.off(echartsEvents.onGeoSelectChanged);
       echartsInstance.on(echartsEvents.onGeoSelectChanged, onGeoSelectChanged);
     }
     if (onGeoSelected) {
+      echartsInstance.off(echartsEvents.onGeoSelected);
       echartsInstance.on(echartsEvents.onGeoSelected, onGeoSelected);
     }
     if (onGeoUnselected) {
+      echartsInstance.off(echartsEvents.onGeoUnselected);
       echartsInstance.on(echartsEvents.onGeoUnselected, onGeoUnselected);
     }
     if (onGlobalCursorTaken) {
+      echartsInstance.off(echartsEvents.onGlobalCursorTaken);
       echartsInstance.on(echartsEvents.onGlobalCursorTaken, onGlobalCursorTaken);
     }
     if (onGlobalOut) {
+      echartsInstance.off(echartsEvents.onGlobalOut);
       echartsInstance.on(echartsEvents.onGlobalOut, onGlobalOut);
     }
     if (onHighlight) {
+      echartsInstance.off(echartsEvents.onHighlight);
       echartsInstance.on(echartsEvents.onHighlight, onHighlight);
     }
     if (onLegendInverseSelect) {
+      echartsInstance.off(echartsEvents.onLegendInverseSelect);
       echartsInstance.on(echartsEvents.onLegendInverseSelect, onLegendInverseSelect);
     }
     if (onLegendScroll) {
+      echartsInstance.off(echartsEvents.onLegendScroll);
       echartsInstance.on(echartsEvents.onLegendScroll, onLegendScroll);
     }
     if (onLegendScroll) {
+      echartsInstance.off(echartsEvents.onLegendScroll);
       echartsInstance.on(echartsEvents.onLegendScroll, onLegendScroll);
     }
     if (onLegendSelectChanged) {
+      echartsInstance.off(echartsEvents.onLegendSelectChanged);
       echartsInstance.on(echartsEvents.onLegendSelectChanged, onLegendSelectChanged);
     }
     if (onLegendSelected) {
+      echartsInstance.off(echartsEvents.onLegendSelected);
       echartsInstance.on(echartsEvents.onLegendSelected, onLegendSelected);
     }
     if (onLegendUnselected) {
+      echartsInstance.off(echartsEvents.onLegendUnselected);
       echartsInstance.on(echartsEvents.onLegendUnselected, onLegendUnselected);
     }
     if (onMagicTypeChanged) {
+      echartsInstance.off(echartsEvents.onMagicTypeChanged);
       echartsInstance.on(echartsEvents.onMagicTypeChanged, onMagicTypeChanged);
     }
     if (onMouseDown) {
+      echartsInstance.off(echartsEvents.onMouseDown);
       echartsInstance.on(echartsEvents.onMouseDown, onMouseDown);
     }
     if (onMouseMove) {
+      echartsInstance.off(echartsEvents.onMouseMove);
       echartsInstance.on(echartsEvents.onMouseMove, onMouseMove);
     }
     if (onMouseOut) {
+      echartsInstance.off(echartsEvents.onMouseOut);
       echartsInstance.on(echartsEvents.onMouseOut, onMouseOut);
     }
     if (onMouseOver) {
+      echartsInstance.off(echartsEvents.onMouseOver);
       echartsInstance.on(echartsEvents.onMouseOver, onMouseOver);
     }
     if (onRendered) {
+      echartsInstance.off(echartsEvents.onRendered);
       echartsInstance.on(echartsEvents.onRendered, onRendered);
     }
     if (onRestore) {
+      echartsInstance.off(echartsEvents.onRestore);
       echartsInstance.on(echartsEvents.onRestore, onRestore);
     }
     if (onSelectChanged) {
+      echartsInstance.off(echartsEvents.onSelectChanged);
       echartsInstance.on(echartsEvents.onSelectChanged, onSelectChanged);
     }
     if (onTimelineChanged) {
+      echartsInstance.off(echartsEvents.onTimelineChanged);
       echartsInstance.on(echartsEvents.onTimelineChanged, onTimelineChanged);
     }
     if (onTimelinePlayChanged) {
+      echartsInstance.off(echartsEvents.onTimelinePlayChanged);
       echartsInstance.on(echartsEvents.onTimelinePlayChanged, onTimelinePlayChanged);
     }
   }, [
diff --git a/node_modules/@kbox-labs/react-echarts/dist/index.mjs b/node_modules/@kbox-labs/react-echarts/dist/index.mjs
index 5a620b4..4a0f17f 100644
--- a/node_modules/@kbox-labs/react-echarts/dist/index.mjs
+++ b/node_modules/@kbox-labs/react-echarts/dist/index.mjs
@@ -315,105 +315,139 @@ function useECharts({
   useEffect(() => {
     if (!echartsInstance) return;
     if (onAxisAreaSelected) {
+      echartsInstance.off(echartsEvents.onAxisAreaSelected);
       echartsInstance.on(echartsEvents.onAxisAreaSelected, onAxisAreaSelected);
     }
     if (onBrush) {
+      echartsInstance.off(echartsEvents.onBrush);
       echartsInstance.on(echartsEvents.onBrush, onBrush);
     }
     if (onBrushEnd) {
+      echartsInstance.off(echartsEvents.onBrushEnd);
       echartsInstance.on(echartsEvents.onBrushEnd, onBrushEnd);
     }
     if (onBrushSelected) {
+      echartsInstance.off(echartsEvents.onBrushSelected);
       echartsInstance.on(echartsEvents.onBrushSelected, onBrushSelected);
     }
     if (onClick) {
+      echartsInstance.off(echartsEvents.onClick);
       echartsInstance.on(echartsEvents.onClick, onClick);
     }
     if (onContextMenu) {
+      echartsInstance.off(echartsEvents.onContextMenu);
       echartsInstance.on(echartsEvents.onContextMenu, onContextMenu);
     }
     if (onDataRangeSelected) {
+      echartsInstance.off(echartsEvents.onDataRangeSelected);
       echartsInstance.on(echartsEvents.onDataRangeSelected, onDataRangeSelected);
     }
     if (onDataViewChanged) {
+      echartsInstance.off(echartsEvents.onDataViewChanged);
       echartsInstance.on(echartsEvents.onDataViewChanged, onDataViewChanged);
     }
     if (onDataZoom) {
+      echartsInstance.off(echartsEvents.onDataZoom);
       echartsInstance.on(echartsEvents.onDataZoom, onDataZoom);
     }
     if (onDoubleClick) {
+      echartsInstance.off(echartsEvents.onDoubleClick);
       echartsInstance.on(echartsEvents.onDoubleClick, onDoubleClick);
     }
     if (onDownplay) {
+      echartsInstance.off(echartsEvents.onDownplay);
       echartsInstance.on(echartsEvents.onDownplay, onDownplay);
     }
     if (onFinished) {
+      echartsInstance.off(echartsEvents.onFinished);
       echartsInstance.on(echartsEvents.onFinished, onFinished);
     }
     if (onGeoSelectChanged) {
+      echartsInstance.off(echartsEvents.onGeoSelectChanged);
       echartsInstance.on(echartsEvents.onGeoSelectChanged, onGeoSelectChanged);
     }
     if (onGeoSelected) {
+      echartsInstance.off(echartsEvents.onGeoSelected);
       echartsInstance.on(echartsEvents.onGeoSelected, onGeoSelected);
     }
     if (onGeoUnselected) {
+      echartsInstance.off(echartsEvents.onGeoUnselected);
       echartsInstance.on(echartsEvents.onGeoUnselected, onGeoUnselected);
     }
     if (onGlobalCursorTaken) {
+      echartsInstance.off(echartsEvents.onGlobalCursorTaken);
       echartsInstance.on(echartsEvents.onGlobalCursorTaken, onGlobalCursorTaken);
     }
     if (onGlobalOut) {
+      echartsInstance.off(echartsEvents.onGlobalOut);
       echartsInstance.on(echartsEvents.onGlobalOut, onGlobalOut);
     }
     if (onHighlight) {
+      echartsInstance.off(echartsEvents.onHighlight);
       echartsInstance.on(echartsEvents.onHighlight, onHighlight);
     }
     if (onLegendInverseSelect) {
+      echartsInstance.off(echartsEvents.onLegendInverseSelect);
       echartsInstance.on(echartsEvents.onLegendInverseSelect, onLegendInverseSelect);
     }
     if (onLegendScroll) {
+      echartsInstance.off(echartsEvents.onLegendScroll);
       echartsInstance.on(echartsEvents.onLegendScroll, onLegendScroll);
     }
     if (onLegendScroll) {
+      echartsInstance.off(echartsEvents.onLegendScroll);
       echartsInstance.on(echartsEvents.onLegendScroll, onLegendScroll);
     }
     if (onLegendSelectChanged) {
+      echartsInstance.off(echartsEvents.onLegendSelectChanged);
       echartsInstance.on(echartsEvents.onLegendSelectChanged, onLegendSelectChanged);
     }
     if (onLegendSelected) {
+      echartsInstance.off(echartsEvents.onLegendSelected);
       echartsInstance.on(echartsEvents.onLegendSelected, onLegendSelected);
     }
     if (onLegendUnselected) {
+      echartsInstance.off(echartsEvents.onLegendUnselected);
       echartsInstance.on(echartsEvents.onLegendUnselected, onLegendUnselected);
     }
     if (onMagicTypeChanged) {
+      echartsInstance.off(echartsEvents.onMagicTypeChanged);
       echartsInstance.on(echartsEvents.onMagicTypeChanged, onMagicTypeChanged);
     }
     if (onMouseDown) {
+      echartsInstance.off(echartsEvents.onMouseDown);
       echartsInstance.on(echartsEvents.onMouseDown, onMouseDown);
     }
     if (onMouseMove) {
+      echartsInstance.off(echartsEvents.onMouseMove);
       echartsInstance.on(echartsEvents.onMouseMove, onMouseMove);
     }
     if (onMouseOut) {
+      echartsInstance.off(echartsEvents.onMouseOut);
       echartsInstance.on(echartsEvents.onMouseOut, onMouseOut);
     }
     if (onMouseOver) {
+      echartsInstance.off(echartsEvents.onMouseOver);
       echartsInstance.on(echartsEvents.onMouseOver, onMouseOver);
     }
     if (onRendered) {
+      echartsInstance.off(echartsEvents.onRendered);
       echartsInstance.on(echartsEvents.onRendered, onRendered);
     }
     if (onRestore) {
+      echartsInstance.off(echartsEvents.onRestore);
       echartsInstance.on(echartsEvents.onRestore, onRestore);
     }
     if (onSelectChanged) {
+      echartsInstance.off(echartsEvents.onSelectChanged);
       echartsInstance.on(echartsEvents.onSelectChanged, onSelectChanged);
     }
     if (onTimelineChanged) {
+      echartsInstance.off(echartsEvents.onTimelineChanged);
       echartsInstance.on(echartsEvents.onTimelineChanged, onTimelineChanged);
     }
     if (onTimelinePlayChanged) {
+      echartsInstance.off(echartsEvents.onTimelinePlayChanged);
       echartsInstance.on(echartsEvents.onTimelinePlayChanged, onTimelinePlayChanged);
     }
   }, [
